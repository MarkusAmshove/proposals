/*
 * generated by Xtext 2.10.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}
@parser::members {
	private MyDslGrammarAccess grammarAccess;

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatementCall
entryRuleStatementCall
:
{ before(grammarAccess.getStatementCallRule()); }
	 ruleStatementCall
{ after(grammarAccess.getStatementCallRule()); } 
	 EOF 
;

// Rule StatementCall
ruleStatementCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementCallAccess().getGroup()); }
		(rule__StatementCall__Group__0)
		{ after(grammarAccess.getStatementCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getGroup()); }
		(rule__Statement__Group__0)
		{ after(grammarAccess.getStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVariablesAssignment_0()); }
	(rule__Model__VariablesAssignment_0)*
	{ after(grammarAccess.getModelAccess().getVariablesAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getStatementsAssignment_1()); }
	(rule__Model__StatementsAssignment_1)*
	{ after(grammarAccess.getModelAccess().getStatementsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getCallsAssignment_2()); }
	(rule__Model__CallsAssignment_2)*
	{ after(grammarAccess.getModelAccess().getCallsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getLetKeyword_0()); }
	'let'
	{ after(grammarAccess.getVariableAccess().getLetKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
	(rule__Variable__NameAssignment_1)
	{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__StatementCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementCall__Group__0__Impl
	rule__StatementCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementCallAccess().getStatementAssignment_0()); }
	(rule__StatementCall__StatementAssignment_0)
	{ after(grammarAccess.getStatementCallAccess().getStatementAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementCall__Group__1__Impl
	rule__StatementCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getStatementCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementCall__Group__2__Impl
	rule__StatementCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementCallAccess().getParameterAssignment_2()); }
	(rule__StatementCall__ParameterAssignment_2)*
	{ after(grammarAccess.getStatementCallAccess().getParameterAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__StatementCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getStatementCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getStatementKeyword_0()); }
	'Statement'
	{ after(grammarAccess.getStatementAccess().getStatementKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getNameAssignment_1()); }
	(rule__Statement__NameAssignment_1)
	{ after(grammarAccess.getStatementAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__2__Impl
	rule__Statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getStatementAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__3__Impl
	rule__Statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getParameterAssignment_3()); }
	(rule__Statement__ParameterAssignment_3)*
	{ after(grammarAccess.getStatementAccess().getParameterAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getStatementAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__VariablesAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVariablesVariableParserRuleCall_0_0()); }
		ruleVariable
		{ after(grammarAccess.getModelAccess().getVariablesVariableParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__StatementsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_0()); }
		ruleStatement
		{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__CallsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCallsStatementCallParserRuleCall_2_0()); }
		ruleStatementCall
		{ after(grammarAccess.getModelAccess().getCallsStatementCallParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__StatementAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementCallAccess().getStatementStatementCrossReference_0_0()); }
		(
			{ before(grammarAccess.getStatementCallAccess().getStatementStatementIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStatementCallAccess().getStatementStatementIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getStatementCallAccess().getStatementStatementCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StatementCall__ParameterAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementCallAccess().getParameterVariableCrossReference_2_0()); }
		(
			{ before(grammarAccess.getStatementCallAccess().getParameterVariableIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getStatementCallAccess().getParameterVariableIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getStatementCallAccess().getParameterVariableCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getStatementAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ParameterAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getParameterVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getStatementAccess().getParameterVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'-'|'$') ('a'..'z'|'A'..'Z'|'-'|'0'..'9')+;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
